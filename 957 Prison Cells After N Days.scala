object Solution {
    
    val next= Array(126,124,122,120,116,118,112,114,106,104,110,108,96,98,100,102,86,84,82,80,92,94,88,90,66,64,70,68,72,74,76,78,46,44,42,40,36,38,32,34,58,56,62,60,48,50,52,54,6,4,2,0,12,14,8,10,18,16,22,20,24,26,28,30,94,92,90,88,84,86,80,82,74,72,78,76,64,66,68,70,118,116,114,112,124,126,120,122,98,96,102,100,104,106,108,110,14,12,10,8,4,6,0,2,26,24,30,28,16,18,20,22,38,36,34,32,44,46,40,42,50,48,54,52,56,58,60,62,62,60,58,56,52,54,48,50,42,40,46,44,32,34,36,38,22,20,18,16,28,30,24,26,2,0,6,4,8,10,12,14,110,108,106,104,100,102,96,98,122,120,126,124,112,114,116,118,70,68,66,64,76,78,72,74,82,80,86,84,88,90,92,94,30,28,26,24,20,22,16,18,10,8,14,12,0,2,4,6,54,52,50,48,60,62,56,58,34,32,38,36,40,42,44,46,78,76,74,72,68,70,64,66,90,88,94,92,80,82,84,86,102,100,98,96,108,110,104,106,114,112,118,116,120,122,124,126)

val cycle= Array(7,0,14,0,14,0,14,0,14,0,14,0,14,0,14,0,14,0,14,0,14,0,14,0,7,0,14,0,14,0,14,0,14,0,14,0,1,0,14,0,14,0,14,0,14,0,14,0,14,0,14,0,14,0,14,0,14,0,14,0,7,0,14,0,14,0,7,0,14,0,14,0,14,0,14,0,14,0,14,0,14,0,14,0,14,0,14,0,14,0,7,0,14,0,14,0,14,0,14,0,14,0,7,0,14,0,14,0,14,0,14,0,14,0,14,0,14,0,14,0,14,0,14,0,14,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    
    def prisonAfterNDays(cells: Array[Int], N: Int): Array[Int] = {
        //table()
        var v = array2int(cells)
        var days = N
        while(cycle(v) == 0) {
            v = next(v)
            days -= 1
            if (N == 0) return int2array(v)
        }
        days = days % cycle(v)
        while (days > 0) {
            v = next(v)
            days -= 1
        }
        int2array(v)     
    }
    
    def dbgPrint(n: Int) = {
        print(s"$n:")
        int2array(n).foreach(x => print(s"$x,"))
        println()
    }
    
    def getNext(n: Int) : Int = {
        //dbgPrint(n)
        val arr = int2array(n)
        val arr2 = new Array[Int](8)
        arr2(0) = 0
        arr2(7) = 0
        for (j <- 1 until 7) {
            arr2(j) = if (arr(j - 1) == arr(j+1)) 1 else 0
        }
        //dbgPrint(array2int(arr2))
        array2int(arr2)
    }
    
    def table() {
        val next = new Array[Int](256)
        for (i <- 0 until 256) {
            next(i) = getNext(i)
        }
        print("val next=Array(")
        //next.foreach(x => print(s"$x,"))
        println(")")
        
        val cycle = new Array[Int](256)
        for (i<- 0 until 256) {
            val set = scala.collection.mutable.Set[Int]()
            var n = i
            while (!set.contains(n)) {
                set += n
                n = next(n)
            }
            cycle(i) = if (n==i) set.size else 0
        }
        print("val cycle=Array(")
        cycle.foreach(x => print(s"$x,"))
        println(")")
    }
    
    def int2array(n :Int) = {
        val array = new Array[Int](8)
        for (j <- 0 until 8) {
            array(j) = if ((n & (1 << j)) > 0) 1 else 0
        }
        array
    }
    
    def array2int(arr: Array[Int]) = {
        var n = 0
        for (j <- 0 until 8) {
            n = n | (arr(j) << j)
        }
        n
    }
}